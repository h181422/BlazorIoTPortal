
@page "/devices"
@inject IDeviceApi DeviceApi
@layout Shared.MainLayout
@using System.Diagnostics
@using System.Security.Cryptography.X509Certificates
@using IoTPortal.Client.Data


<style>
    .button {
        font: bold 16px Arial;
        text-decoration: none;
        background-color: #EEEEEE;
        color: #333333;
        padding: 2px 6px 2px 6px;
        border-top: 1px solid #CCCCCC;
        border-right: 1px solid #333333;
        border-bottom: 1px solid #333333;
        border-left: 1px solid #CCCCCC;
    }
</style>

<h1>Your Devices</h1>

<div id="ticket-list">
    @if (allDevices == null)
    {
        <h2>Loading your devices...</h2>
    }
    else
    {

        <a class="button" @onclick="SortALot" style="font-size:20px;">Bubble-Sort a hundred times</a>
        <p>@Result</p>
        <a class="button" href="/AddDevice" style="font-size:20px;">Add Device</a>
        if (allDevices.Count() == 0)
        {
            <h2>You have no devices :(</h2>
        }
        else
        {
            <div class="row">
                @foreach (var device in allDevices)
                {
                    <DeviceCard Device="@device" />
                }
            </div>
            if (requests.Count() == 0)
            {
                <h3>No requests for your devices</h3>
            }
            else
            {
                <h3>Requests for devices:</h3>
                <div class="row">
                    @foreach (var register in requests)
                    {
                        <RequestRow Register="@register" />
                    }
                </div>
            }
        }
    }
</div>



@code {
    private IEnumerable<Device> allDevices { get; set; }

    private IEnumerable<Register> requests { get; set; }

    public static Devices Self { get; set; }

    protected override async Task OnInitializedAsync()
    {
        allDevices = await DeviceApi.GetDevicesFromUser(AuthData.Id);
        requests = await DeviceApi.GetRequestsAsync(AuthData.Id);
        Self = this;
    }

    public static void Update(Device device)
    {
        Self.allDevices = Self.allDevices.Where(b => b.Id != device.Id).ToList();
        Self.StateHasChanged();
    }

    public static string Result;
    public static int numElements = 1000;

    public static void SortALot()
    {
        var sw = Stopwatch.StartNew();
        for (int i = 0; i < 100; i++)
        {
            string prt = "";
            sw.Reset();
            sw.Start();
            var arr = new List<int>();
            Random r = new Random();
            for (int j = 0; j < numElements; j++)
            {
                arr.Add(r.Next(100000));
            }
            prt += i+";Generated list;";
            prt += sw.ElapsedMilliseconds;
            BubbleSort(arr, arr.Count);
            prt += ";sorted;" + sw.ElapsedMilliseconds;
            Result += prt + "<br>";
        }

    }

    public static void BubbleSort(List<int> tabell, int size)
    {
        bool bytter;
        int temp;
        size--;
        do
        {
            bytter = false;
            for (int i = 0; i < size; i++)
            {
                if (tabell[i] > tabell[i + 1])
                {
                    temp = tabell[i];
                    tabell[i] = tabell[i + 1];
                    tabell[i + 1] = temp;
                    bytter = true;
                }
            }
        } while (bytter);
    }


}
